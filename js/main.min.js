document.addEventListener('DOMContentLoaded',()=>{if(!isWasmSupported()){showNotification('WebAssembly is not supported in this browser. Some features may not work correctly.','warning',5000)}initTabs();initDecoderTab();initBruteforceTab();initEditorTab();initGeneratorTab()});function initTabs(){const a=document.querySelectorAll('.tab-btn'),b=document.querySelectorAll('.tab-pane');a.forEach(c=>{c.addEventListener('click',()=>{const d=c.getAttribute('data-tab');a.forEach(e=>e.classList.remove('active'));c.classList.add('active');b.forEach(e=>e.classList.remove('active'));document.getElementById(d).classList.add('active')})})}function initDecoderTab(){const a=document.getElementById('jwt-input'),b=document.getElementById('decode-btn'),c=document.getElementById('generate-random-jwt-btn'),d=document.getElementById('header-output'),e=document.getElementById('payload-output'),f=document.getElementById('signature-output'),g=document.getElementById('security-analysis');c.addEventListener('click',()=>{try{jwtGenerator.resetToDefaults();const h='random-secret-'+Math.random().toString(36).substring(2,15),i=jwtGenerator.generateToken('HS256',h);a.value=i;b.click();showNotification('Random JWT generated and analyzed successfully','success')}catch(h){showNotification(`Error generating random JWT: ${h.message}`,'error')}});b.addEventListener('click',()=>{const h=a.value.trim();if(!h){showNotification('Please enter a JWT token','warning');return}try{const i=jwtDecoder.decode(h);d.innerHTML=formatJSON(i.header);e.innerHTML=formatJSON(i.payload);f.textContent=i.signature;jwtAnalyzer.analyze(h);g.innerHTML=jwtAnalyzer.getVulnerabilitiesHTML();const j=document.querySelector('.analysis-actions');j&&j.remove();setTimeout(()=>{const k=document.querySelectorAll('.vulnerability a[href=\"#bruteforce\"], .vulnerability-card a[href=\"#bruteforce\"], .test-btn');k.forEach(l=>{l.addEventListener('click',m=>{m.preventDefault();document.querySelector('.tab-btn[data-tab=\"bruteforce\"]').click();document.getElementById('bruteforce-jwt-input').value=h;showNotification('Token copied to Bruteforce tab','info')})});if(jwtDecoder.usesSymmetricAlgorithm()){const l=document.createElement('div');l.className='analysis-actions';l.innerHTML=`<button id=\"try-bruteforce-btn\" class=\"primary-btn\"><i class=\"fas fa-key\"></i> Test for Weak Secret</button><p class=\"action-hint\">This token uses a symmetric algorithm (HS*) and could be tested for weak secrets</p>`;g.parentNode.insertBefore(l,g.nextSibling);document.getElementById('try-bruteforce-btn').addEventListener('click',()=>{document.querySelector('.tab-btn[data-tab=\"bruteforce\"]').click();document.getElementById('bruteforce-jwt-input').value=h;showNotification('Token copied to Bruteforce tab','info')})}},100);showNotification('JWT decoded and analyzed successfully','success')}catch(i){showNotification(`Error: ${i.message}`,'error');d.innerHTML='';e.innerHTML='';f.textContent='';g.innerHTML='';const j=document.querySelector('.analysis-actions');j&&j.remove()}})}function initBruteforceTab(){const a=document.getElementById('bruteforce-jwt-input'),b=document.querySelectorAll('input[name=\"bruteforce-method\"]'),c=document.getElementById('custom-wordlist-container'),d=document.getElementById('custom-wordlist'),e=document.getElementById('wordlist-file'),f=document.getElementById('file-name'),g=document.getElementById('start-bruteforce-btn'),h=document.getElementById('stop-bruteforce-btn'),i=document.getElementById('bruteforce-progress'),j=document.getElementById('progress-text'),k=document.getElementById('bruteforce-status'),l=document.getElementById('bruteforce-result'),m=document.getElementById('bruteforce-options'),n=document.getElementById('bruteforce-warning');a.addEventListener('input',()=>{const o=a.value.trim();if(o){try{const p=jwtDecoder.decode(o),q=p.header.alg;n&&(n.innerHTML='',n.style.display='none');if(q!=='none'&&!q.startsWith('HS')){n&&(n.innerHTML=`<div class=\"warning-box\"><i class=\"fas fa-exclamation-triangle warning-icon\"></i><div class=\"warning-content\"><strong>Non-HMAC Algorithm Detected: ${q}</strong><p>This token uses ${q}, which cannot be bruteforced using this method.</p><p>Only HMAC algorithms (HS256, HS384, HS512) can be bruteforced because they use a shared secret key.</p><p>${q} uses asymmetric cryptography with public/private key pairs, which cannot be bruteforced.</p><p><a href=\"docs/tool-guides/secret-bruteforcer.html#limitations\" target=\"_blank\">Learn more about algorithm limitations</a></p></div></div>`,n.style.display='block',g.disabled=!0)}else g.disabled=!1}catch(p){n&&(n.innerHTML='',n.style.display='none')}}else n&&(n.innerHTML='',n.style.display='none')});b.forEach(o=>{o.addEventListener('change',()=>{if(o.value==='custom'){c.style.display='block';document.getElementById('dictionary-description').style.display='none';document.getElementById('custom-description').style.display='block'}else{c.style.display='none';document.getElementById('dictionary-description').style.display='block';document.getElementById('custom-description').style.display='none'}})});e.addEventListener('change',o=>{const p=o.target.files[0];if(p){f.textContent=p.name;const q=new FileReader;q.onload=r=>{d.value=r.target.result};q.readAsText(p)}else f.textContent=''});g.addEventListener('click',async()=>{const o=a.value.trim();if(!o){showNotification('Please enter a JWT token','warning');return}try{const p=jwtDecoder.decode(o),q=p.header.alg;if(q!=='none'&&!q.startsWith('HS')){n&&(n.innerHTML=`<div class=\"warning-box\"><i class=\"fas fa-exclamation-triangle warning-icon\"></i><div class=\"warning-content\"><strong>Non-HMAC Algorithm Detected: ${q}</strong><p>This token uses ${q}, which cannot be bruteforced using this method.</p><p>Only HMAC algorithms (HS256, HS384, HS512) can be bruteforced because they use a shared secret key.</p><p>${q} uses asymmetric cryptography with public/private key pairs, which cannot be bruteforced.</p><p><a href=\"docs/tool-guides/secret-bruteforcer.html#limitations\" target=\"_blank\">Learn more about algorithm limitations</a></p></div></div>`,n.style.display='block');showNotification(`Cannot bruteforce: Algorithm ${q} not supported for bruteforcing`,'warning');return}}catch(p){}const q=document.querySelector('input[name=\"bruteforce-method\"]:checked').value;if(!jwtBruteforcer.init(o)){if(jwtBruteforcer.nonHmacAlgorithmDetected){const r=jwtBruteforcer.detectedAlgorithm;k.textContent=`Cannot bruteforce: Algorithm ${r} not supported`;l.innerHTML=`<div class=\"warning-box\"><i class=\"fas fa-exclamation-triangle warning-icon\"></i><div class=\"warning-content\"><strong>Non-HMAC Algorithm Detected: ${r}</strong><p>This token uses ${r}, which cannot be bruteforced using this method.</p><p>Only HMAC algorithms (HS256, HS384, HS512) can be bruteforced because they use a shared secret key.</p><p>${r} uses asymmetric cryptography with public/private key pairs, which cannot be bruteforced.</p><p><a href=\"docs/tool-guides/secret-bruteforcer.html#limitations\" target=\"_blank\">Learn more about algorithm limitations</a></p></div></div>`;l.style.display='block';showNotification(`Cannot bruteforce: Algorithm ${r} not supported for bruteforcing`,'warning')}else showNotification('Failed to initialize bruteforcer. Check if the token is valid.','error');return}if(q==='custom'){if(!d.value.trim()){showNotification('Please enter a custom wordlist','warning');return}jwtBruteforcer.setCustomWordlist(d.value)}g.disabled=!0;h.disabled=!1;i.style.width='0%';j.textContent='0%';k.textContent='Bruteforcing in progress...';l.style.display='none';l.textContent='';jwtBruteforcer.start(q,r=>{i.style.width=`${r}%`;j.textContent=`${r}%`},r=>{if(r.success){k.textContent='Secret found!';l.textContent=`Secret: ${r.secret}`;l.style.display='block';showNotification('Secret found!','success')}else{k.textContent=r.error||'No matching secret found in the wordlist.';showNotification('Bruteforce completed without finding a match','info')}g.disabled=!1;h.disabled=!0})});h.addEventListener('click',()=>{jwtBruteforcer.stop();k.textContent='Bruteforce stopped by user.';g.disabled=!1;h.disabled=!0;showNotification('Bruteforce stopped','info')})}function initEditorTab(){const a=document.getElementById('editor-jwt-input'),b=document.getElementById('load-jwt-btn'),c=document.getElementById('header-editor'),d=document.getElementById('payload-editor'),e=document.getElementById('signature-algorithm'),f=document.getElementById('secret-key-container'),g=document.getElementById('rsa-key-container'),h=document.getElementById('secret-key'),i=document.getElementById('private-key'),j=document.getElementById('generate-edited-jwt-btn'),k=document.getElementById('copy-edited-jwt-btn'),l=document.getElementById('edited-jwt-output');e.addEventListener('change',()=>{const m=e.value;if(m==='none'){f.style.display='none';g.style.display='none'}else if(m.startsWith('HS')){f.style.display='block';g.style.display='none'}else if(m.startsWith('RS')){f.style.display='none';g.style.display='block'}});b.addEventListener('click',()=>{const m=a.value.trim();if(!m){showNotification('Please enter a JWT token','warning');return}try{const n=jwtEditor.loadToken(m);c.value=jwtEditor.getFormattedHeader();d.value=jwtEditor.getFormattedPayload();e.value=n.header.alg||'HS256';e.dispatchEvent(new Event('change'));showNotification('JWT loaded successfully','success')}catch(n){showNotification(`Error: ${n.message}`,'error')}});j.addEventListener('click',()=>{try{jwtEditor.updateHeader(c.value);jwtEditor.updatePayload(d.value);const m=e.value;let n;if(m==='none')n=jwtEditor.generateNoneToken();else if(m.startsWith('HS')){if(!h.value){showNotification('Please enter a secret key','warning');return}n=jwtEditor.generateSymmetricToken(m,h.value)}else if(m.startsWith('RS')){if(!i.value){showNotification('Please enter a private key','warning');return}n=jwtEditor.generateAsymmetricToken(m,i.value)}l.textContent=n;showNotification('JWT generated successfully','success')}catch(m){showNotification(`Error: ${m.message}`,'error')}});k.addEventListener('click',async()=>{const m=l.textContent;if(!m){showNotification('No JWT to copy','warning');return}try{await copyToClipboard(m);showNotification('JWT copied to clipboard','success')}catch(m){showNotification('Failed to copy to clipboard','error')}})}function initGeneratorTab(){const a=document.getElementById('generator-header'),b=document.getElementById('generator-payload'),c=document.querySelectorAll('.claim-btn'),d=document.getElementById('generator-algorithm'),e=document.getElementById('generator-secret-key-container'),f=document.getElementById('generator-rsa-key-container'),g=document.getElementById('generator-secret-key'),h=document.getElementById('generator-private-key'),i=document.getElementById('generator-public-key'),j=document.getElementById('public-key-display'),k=document.getElementById('generate-rsa-keys-btn'),l=document.getElementById('generate-new-jwt-btn'),m=document.getElementById('copy-new-jwt-btn'),n=document.getElementById('generated-jwt-output');jwtGenerator.resetToDefaults();a.value=jwtGenerator.getFormattedHeader();b.value=jwtGenerator.getFormattedPayload();d.addEventListener('change',()=>{const o=d.value;if(o==='none'){e.style.display='none';f.style.display='none'}else if(o.startsWith('HS')){e.style.display='block';f.style.display='none'}else if(o.startsWith('RS')){e.style.display='none';f.style.display='block'}});k.addEventListener('click',async()=>{try{showNotification('Generating RSA key pair...','info',2000);const o=await generateRSAKeyPair(2048);h.value=o.privateKey;i.value=o.publicKey;j.style.display='block';showNotification('RSA key pair generated successfully!','success')}catch(o){showNotification(`Error: ${o.message}`,'error')}});c.forEach(o=>{o.addEventListener('click',()=>{const p=o.getAttribute('data-claim');try{jwtGenerator.setPayload(b.value);if(jwtGenerator.addClaim(p)){b.value=jwtGenerator.getFormattedPayload();showNotification(`Added ${p} claim`,'success')}else showNotification(`Claim ${p} already exists`,'info')}catch(p){showNotification(`Error: ${p.message}`,'error')}})});l.addEventListener('click',()=>{try{jwtGenerator.setHeader(a.value);jwtGenerator.setPayload(b.value);jwtGenerator.updateTimestamps();const o=d.value;let p;if(o==='none')p=jwtGenerator.generateToken('none');else if(o.startsWith('HS')){if(!g.value){showNotification('Please enter a secret key','warning');return}p=jwtGenerator.generateToken(o,g.value)}else if(o.startsWith('RS')){if(!h.value){showNotification('Please enter a private key','warning');return}p=jwtGenerator.generateToken(o,'',h.value)}n.textContent=p;b.value=jwtGenerator.getFormattedPayload();showNotification('JWT generated successfully','success')}catch(o){showNotification(`Error: ${o.message}`,'error')}});m.addEventListener('click',async()=>{const o=n.textContent;if(!o){showNotification('No JWT to copy','warning');return}try{await copyToClipboard(o);showNotification('JWT copied to clipboard','success')}catch(o){showNotification('Failed to copy to clipboard','error')}})}