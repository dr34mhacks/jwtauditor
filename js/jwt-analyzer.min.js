class JWTAnalyzer{constructor(){this.vulnerabilities=[];this.decoder=jwtDecoder;this.securitySummary={totalIssues:0,highSeverity:0,mediumSeverity:0,lowSeverity:0,infoItems:0}}analyze(a){this.vulnerabilities=[];this.securitySummary={totalIssues:0,highSeverity:0,mediumSeverity:0,lowSeverity:0,infoItems:0};try{const b=this.decoder.decode(a);this.checkAlgorithmVulnerabilities();this.checkExpirationIssues();this.checkSensitiveData();this.checkMissingClaims();this.checkWeakSignature();this.checkSignaturePresence();this.checkBruteforceVulnerability();this.checkKidHeaderIssues();this.checkJwtIdIssues();this.checkAudienceIssues();this.checkReplayPotential();return this.vulnerabilities}catch(b){this.addVulnerability('Invalid JWT Format','high',`The JWT could not be decoded: ${b.message}`,'Ensure the JWT is properly formatted with three parts separated by dots.');return this.vulnerabilities}}checkAlgorithmVulnerabilities(){const a=this.decoder.getAlgorithm();if(this.decoder.usesNoneAlgorithm()){this.addVulnerability('None Algorithm','high','The JWT uses the "none" algorithm, which means it has no signature.','Reject tokens with the "none" algorithm as they can be easily forged. <a href="docs/jwt-vulnerabilities-guide.html#algorithm-none" target="_blank">Learn more about algorithm none attacks</a>')}if(a==='HS256'){this.addVulnerability('Potentially Weak Algorithm','medium','The JWT uses HS256, which may be vulnerable if a weak secret is used.','Consider using a stronger algorithm like HS384, HS512, or an asymmetric algorithm (RS256, ES256). <a href="docs/jwt-vulnerabilities-guide.html#weak-secrets" target="_blank">Learn more about weak secrets</a>')}if(this.decoder.usesSymmetricAlgorithm()){this.addVulnerability('Potential Algorithm Confusion','medium','The JWT uses a symmetric algorithm (HS*), which may be vulnerable to algorithm confusion attacks if the server accepts multiple algorithms.','Ensure your application explicitly validates the algorithm before verification and rejects unexpected algorithms. <a href="docs/jwt-vulnerabilities-guide.html#algorithm-confusion" target="_blank">Learn more about algorithm confusion</a>')}const b=['HS1','RS1','ES1','PS1'];if(b.some(c=>a&&a.startsWith(c))){this.addVulnerability('Insecure Algorithm','high',`The JWT uses ${a}, which is considered cryptographically insecure.`,'Use a modern, secure algorithm like HS256, RS256, ES256, or PS256 at minimum.')}}checkExpirationIssues(){const a=this.decoder.payload;if(this.decoder.isExpired()){this.addVulnerability('Expired Token','medium',`The token expired on ${formatTimestamp(a.exp)}.`,'Reject expired tokens in your application.')}if(!a.exp){this.addVulnerability('No Expiration','high','The token does not have an expiration time (exp claim), making it valid indefinitely.','Always include an expiration time in your JWTs to limit their lifetime and reduce the impact of token theft. <a href="docs/jwt-vulnerabilities-guide.html#missing-claims" target="_blank">Learn more about missing claims</a>')}if(a.exp&&a.iat){const b=a.exp-a.iat;if(b>86400){this.addVulnerability('Long Token Lifetime','medium',`The token has a lifetime of ${Math.floor(b/86400)} days.`,'Consider using shorter-lived tokens (hours instead of days) to reduce the impact of token theft.')}}if(a.nbf&&a.nbf>Math.floor(Date.now()/1000)){this.addVulnerability('Token Not Yet Valid','medium',`This token is not valid until ${formatTimestamp(a.nbf)}.`,'Verify that your server and client clocks are synchronized.')}}checkSensitiveData(){const a=this.decoder.payload,b=[{name:'password',regex:/pass(word)?/i},{name:'secret',regex:/secret/i},{name:'credential',regex:/credential/i},{name:'token',regex:/token/i},{name:'key',regex:/key/i},{name:'ssn',regex:/ssn|social.*security/i},{name:'credit card',regex:/credit.*card|card.*number|cc|credit_card/i},{name:'api key',regex:/api.*key/i},{name:'auth',regex:/auth/i},{name:'private',regex:/private/i},{name:'access token',regex:/access.*token/i},{name:'refresh token',regex:/refresh.*token/i},{name:'session',regex:/session/i}],c=[];for(const d of b){for(const e in a){if(d.regex.test(e)){c.push(e)}}}const f=['email','address','phone','dob','birthdate','birth_date','ssn','social_security','passport','driver_license','license_number','national_id','tax_id','ip_address','location','gps','coordinates','first_name','last_name','full_name','username','user_id'],g=[];for(const d of f){for(const e in a){if(e.toLowerCase().includes(d.toLowerCase())){g.push(e)}}}const h=/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3[0-5][0-9]{11}|6(?:011|5[0-9]{2})[0-9]{12})$/,i=[];for(const d in a){if(d.toLowerCase().includes('card')||d.toLowerCase().includes('cc')||d.toLowerCase().includes('credit')){const e=String(a[d]),j=e.replace(/[\s-]/g,'');if(h.test(j)&&j.length>=13&&j.length<=19){i.push(d)}}}const k=['admin','administrator','root','superuser','system'],l=[];if(a.role){const d=String(a.role).toLowerCase();if(k.includes(d)){l.push(a.role)}}else if(a.roles&&Array.isArray(a.roles)){for(const d of a.roles){const e=String(d).toLowerCase();if(k.includes(e)){l.push(d)}}}const m=JSON.stringify(a).length;if(m>1000){this.addVulnerability('Large Payload','low',`The JWT payload is ${m} bytes, which is relatively large.`,'Consider minimizing the data stored in JWTs to improve performance and reduce bandwidth usage.')}if(c.length>0){this.addVulnerability('Sensitive Data in Payload','high',`The JWT contains potentially sensitive data: ${c.join(', ')}.`,'Remove sensitive information from the JWT payload as it is only encoded, not encrypted. Store sensitive data server-side instead. <a href="docs/jwt-vulnerabilities-guide.html#sensitive-data" target="_blank">Learn more about sensitive data in JWTs</a>')}if(g.length>0){this.addVulnerability('PII in Payload','high',`The JWT contains personally identifiable information (PII): ${g.join(', ')}.`,'Remove or minimize PII in the JWT payload to comply with privacy regulations like GDPR and CCPA. Store PII server-side instead. <a href="docs/jwt-vulnerabilities-guide.html#sensitive-data" target="_blank">Learn more about PII in JWTs</a>')}if(i.length>0){this.addVulnerability('Credit Card Data in Payload','critical',`The JWT contains what appears to be credit card numbers in these fields: ${i.join(', ')}.`,'Never store credit card information in JWTs. This violates PCI DSS requirements and poses a serious security risk. <a href="docs/jwt-vulnerabilities-guide.html#sensitive-data" target="_blank">Learn more about sensitive data risks</a>')}if(l.length>0){this.addVulnerability('Sensitive Role Information','medium',`The JWT contains sensitive role information: ${l.join(', ')}.`,'Consider using role IDs or more generic role descriptions in the token, and perform detailed permission checks server-side.')}if(Object.keys(a).length>15){this.addVulnerability('Excessive Claims','medium',`The JWT contains ${Object.keys(a).length} claims, which is unusually high.`,'Minimize the number of claims in your JWT to reduce token size and limit exposure of unnecessary data.')}}checkMissingClaims(){const a=this.decoder.payload,b=[];if(!a.iss)b.push('iss (issuer)');if(!a.sub)b.push('sub (subject)');if(!a.iat)b.push('iat (issued at)');if(!a.jti)b.push('jti (JWT ID)');if(!a.aud)b.push('aud (audience)');if(b.length>0){this.addVulnerability('Missing Recommended Claims','medium',`The JWT is missing recommended claims: ${b.join(', ')}.`,'Include these claims to improve security and prevent token misuse, replay attacks, and audience confusion. <a href="docs/jwt-vulnerabilities-guide.html#missing-claims" target="_blank">Learn more about important JWT claims</a>')}const c=[];for(const[d,e]of Object.entries(a)){if(e===''||e===null||(Array.isArray(e)&&e.length===0)){c.push(d)}}if(c.length>0){this.addVulnerability('Empty Claims','low',`The JWT contains empty claims: ${c.join(', ')}.`,'Remove empty claims or provide meaningful values to avoid potential validation issues.')}}checkWeakSignature(){const a=this.decoder.getAlgorithm(),b=this.decoder.signature;if(b&&b.length<10&&a!=='none'){this.addVulnerability('Suspiciously Short Signature','high','The token signature is suspiciously short, which may indicate a weak or compromised signature.','Verify that your signing process is using a strong secret or key. <a href="docs/jwt-vulnerabilities-guide.html#weak-secrets" target="_blank">Learn more about weak signatures</a>')}if(a&&a.startsWith('HS')){const c={HS256:40,HS384:60,HS512:80},d=c[a]||40;if(b&&b.length<d){this.addVulnerability('Potentially Weak Signature','medium',`The signature length (${b.length}) is shorter than expected for ${a} algorithm (expected ~${d}).`,'Ensure you are using a sufficiently strong secret key for the selected algorithm. <a href="docs/jwt-vulnerabilities-guide.html#weak-secrets" target="_blank">Learn more about signature strength</a>')}}}checkSignaturePresence(){const a=this.decoder.signature,b=this.decoder.getAlgorithm();if(b!=='none'&&(!a||a.length===0)){this.addVulnerability('Missing Signature','high',`The JWT claims to use the '${b}' algorithm but has no signature.`,'Ensure the token is properly signed. Reject tokens with missing signatures.')}}checkBruteforceVulnerability(){if(this.decoder.usesSymmetricAlgorithm()){this.addVulnerability('Potential Bruteforce Vulnerability','medium','This JWT uses a symmetric algorithm (HS*) which could be vulnerable to secret bruteforcing if a weak secret was used.','Use a strong, high-entropy secret key (at least 32 random bytes) and consider using the Secret Bruteforcer tool to test your token against common secrets. <a href="docs/jwt-vulnerabilities-guide.html#weak-secrets" target="_blank">Learn more about weak secret attacks</a>');this.addVulnerability('Bruteforce Testing Recommended','info','You should test this token with the Secret Bruteforcer tool to check if it uses a weak secret.','Click on the "âš¡ Secret Bruteforce" tab or use the "Test for Weak Secret" button below to test this token against common secrets and wordlists.')}}checkKidHeaderIssues(){const a=this.decoder.header;if(a&&a.kid){const b=["'",'"',';','--','/*','*/','=',' OR ',' AND ','UNION','SELECT','DROP','INSERT','DELETE','UPDATE'];let c=!1,d=[];for(const e of b){const f=e.trim().toUpperCase(),g=a.kid.toUpperCase();if(f==="'"||f==='"'||f===';'||f==='--'){if(a.kid.includes(e)){c=!0;d.push(e)}}else if(f===' OR '||f===' AND '){if(g.includes(f)||g.includes(f.trim()+' ')||g.includes(' '+f.trim())){c=!0;d.push(e.trim())}}else{if(g.includes(' '+f+' ')||g.startsWith(f+' ')||g.endsWith(' '+f)||g===f){c=!0;d.push(e)}}}if(c){this.addVulnerability('SQL Injection in kid Header','high',`The 'kid' header parameter contains SQL injection patterns: ${d.join(', ')}`,'Validate and sanitize the kid parameter before using it in database queries. Reject tokens with suspicious kid values. <a href="docs/jwt-vulnerabilities-guide.html#kid-injection" target="_blank">Learn more about kid injection attacks</a>')}const e=['../','..\\','%2e%2e%2f','%2e%2e/','..%2f','%252e%252e%252f'];let f=!1,g=[];for(const h of e){if(a.kid.toLowerCase().includes(h.toLowerCase())){f=!0;g.push(h)}}if(f){this.addVulnerability('Path Traversal in kid Header','high',`The 'kid' header parameter contains directory traversal sequences: ${g.join(', ')}`,'Validate the kid parameter and never use it directly in file system operations. Reject tokens with path traversal attempts. <a href="docs/jwt-vulnerabilities-guide.html#kid-injection" target="_blank">Learn more about kid path traversal attacks</a>')}const h=['|','&',';','`','$','(',')',' rm ',' cat ','bash',' sh ','/bin/',' wget ',' curl ',' > ',' >> '];let i=!1,j=[];for(const k of h){if(a.kid.toLowerCase().includes(k.toLowerCase())){i=!0;j.push(k)}}if(i){this.addVulnerability('Command Injection in kid Header','high',`The 'kid' header parameter contains command injection patterns: ${j.join(', ')}`,'Validate and sanitize the kid parameter before using it in any command or system operations. Reject tokens with suspicious kid values. <a href="docs/jwt-vulnerabilities-guide.html#kid-injection" target="_blank">Learn more about kid command injection</a>')}if(a.kid.length>100){this.addVulnerability('Excessively Long kid Header','medium',`The 'kid' header parameter is unusually long (${a.kid.length} characters)`,'Limit the length of the kid parameter to prevent potential buffer overflow attacks and performance issues. <a href="docs/jwt-vulnerabilities-guide.html#kid-injection" target="_blank">Learn more about kid header security</a>')}}}checkJwtIdIssues(){const a=this.decoder.payload;if(!a.jti){this.addVulnerability('Missing JWT ID','medium','The token does not have a JWT ID (jti claim), which makes it harder to implement token revocation.','Include a unique jti claim to enable token revocation and prevent replay attacks. <a href="docs/jwt-vulnerabilities-guide.html#replay-attacks" target="_blank">Learn more about replay attack prevention</a>')}else{const b=/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i,c=a.jti.length>=16&&/[a-zA-Z0-9_-]{16,}/.test(a.jti);if(a.jti.length<8){this.addVulnerability('Very Weak JWT ID','high',`The JWT ID (jti: "${a.jti}") is too short (${a.jti.length} characters) and lacks sufficient entropy.`,'Use a UUID or other high-entropy value (at least 16 characters) for the jti claim to ensure uniqueness and prevent token forgery.')}else if(!b.test(a.jti)&&!c){this.addVulnerability('Potentially Weak JWT ID','medium',`The JWT ID (jti: "${a.jti}") may not have sufficient randomness or uniqueness.`,'Use a UUID or other high-entropy value for the jti claim to ensure uniqueness.')}if(/^[0-9]+$/.test(a.jti)){this.addVulnerability('Sequential JWT ID','high',`The JWT ID (jti: "${a.jti}") appears to be a sequential number, which is predictable.`,'Use unpredictable, random values for JWT IDs to prevent token enumeration attacks.')}}}checkAudienceIssues(){const a=this.decoder.payload;if(!a.aud){this.addVulnerability('Missing Audience','medium','The token does not have an audience (aud) claim, which is important for restricting where the token can be used.','Include a specific audience claim to prevent the token from being accepted by unintended services. <a href="docs/jwt-vulnerabilities-guide.html#missing-claims" target="_blank">Learn more about audience validation</a>');return}const b=['all','any','public','everyone','*','api','service','users','app'],c=['*','.*','.+'];if(typeof a.aud==='string'){if(b.includes(a.aud.toLowerCase())){this.addVulnerability('Overly Generic Audience','high',`The audience claim (${a.aud}) is too generic, which reduces the security benefit of audience validation.`,'Use specific audience values that identify the intended recipient of the token.')}if(c.some(d=>a.aud.includes(d))){this.addVulnerability('Wildcard in Audience','high',`The audience claim (${a.aud}) contains wildcard characters, which could allow unintended services to accept the token.`,'Avoid using wildcards in audience claims. Use specific, fully-qualified identifiers instead.')}if(a.aud.length<3&&!c.includes(a.aud)){this.addVulnerability('Very Short Audience','medium',`The audience claim (${a.aud}) is very short, which may not provide sufficient specificity.`,'Use longer, more specific audience identifiers to properly restrict token usage.')}}else if(Array.isArray(a.aud)){if(a.aud.length>5){this.addVulnerability('Multiple Audiences','medium',`The token has ${a.aud.length} audiences, which may indicate overly permissive access.`,'Limit the number of audiences to only those that truly need to accept this token.')}const d=a.aud.filter(e=>typeof e==='string'&&b.includes(e.toLowerCase())).map(e=>e);if(d.length>0){this.addVulnerability('Generic Audience Values','high',`The audience claim contains generic values: ${d.join(', ')}`,'Use specific audience values that identify the intended recipients of the token.')}const f=a.aud.filter(e=>typeof e==='string'&&c.some(g=>e.includes(g))).map(e=>e);if(f.length>0){this.addVulnerability('Wildcards in Audience Values','high',`The audience claim contains wildcard patterns: ${f.join(', ')}`,'Avoid using wildcards in audience claims. Use specific, fully-qualified identifiers instead.')}}else{this.addVulnerability('Invalid Audience Format','medium',`The audience claim has an invalid format: ${typeof a.aud}`,'The audience claim should be a string or an array of strings.')}}checkReplayPotential(){const a=this.decoder.payload;if(!a.jti&&a.exp){const b=Math.floor(Date.now()/1000),c=a.exp-b;if(c>3600){this.addVulnerability('Replay Attack Vulnerability','medium','This token lacks a JWT ID (jti) and has a long expiration time, making it vulnerable to replay attacks.','Add a unique jti claim and implement server-side token tracking to prevent replay attacks. <a href="docs/jwt-vulnerabilities-guide.html#replay-attacks" target="_blank">Learn more about replay attack prevention</a>')}}}addVulnerability(a,b,c,d){this.vulnerabilities.push({title:a,severity:b,description:c,recommendation:d});this.securitySummary.totalIssues++;switch(b){case'critical':this.securitySummary.highSeverity++;break;case'high':this.securitySummary.highSeverity++;break;case'medium':this.securitySummary.mediumSeverity++;break;case'low':this.securitySummary.lowSeverity++;break;case'info':this.securitySummary.infoItems++;break}}getVulnerabilitiesHTML(){if(this.vulnerabilities.length===0){return`<div class="vulnerability none"><h3><i class="fas fa-check-circle"></i> No Vulnerabilities Detected</h3><p>No obvious security issues were found in this JWT.</p><p>Note: This does not guarantee the token is secure. Always follow best practices for JWT handling.</p></div>`}const a={critical:0,high:1,medium:2,low:3,info:4,none:5};this.vulnerabilities.sort((b,c)=>a[b.severity]-a[c.severity]);const d=this.vulnerabilities.filter(b=>b.severity==='critical').length,e=`<div class="analysis-summary"><h3><i class="fas fa-chart-pie"></i> Security Analysis Summary</h3><div class="summary-stats">${d>0?`<div class="stat-item critical"><span class="stat-count">${d}</span><span class="stat-label">Critical</span></div>`:''}<div class="stat-item high"><span class="stat-count">${this.securitySummary.highSeverity}</span><span class="stat-label">High</span></div><div class="stat-item medium"><span class="stat-count">${this.securitySummary.mediumSeverity}</span><span class="stat-label">Medium</span></div><div class="stat-item low"><span class="stat-count">${this.securitySummary.lowSeverity}</span><span class="stat-label">Low</span></div><div class="stat-item info"><span class="stat-count">${this.securitySummary.infoItems}</span><span class="stat-label">Info</span></div></div>${this.getSecurityRecommendationHTML()}</div>`,f=this.vulnerabilities.map(b=>{let c='';switch(b.severity){case'critical':c='<i class="fas fa-skull-crossbones"></i>';break;case'high':c='<i class="fas fa-exclamation-triangle"></i>';break;case'medium':c='<i class="fas fa-exclamation-circle"></i>';break;case'low':c='<i class="fas fa-info-circle"></i>';break;case'info':c='<i class="fas fa-lightbulb"></i>';break;default:c='<i class="fas fa-check-circle"></i>'}return`<div class="vulnerability ${b.severity}"><h3>${c} ${b.title}</h3><p><strong>Severity:</strong> ${b.severity.charAt(0).toUpperCase()+b.severity.slice(1)}</p><p><strong>Description:</strong> ${b.description}</p><p><strong>Recommendation:</strong> ${b.recommendation}</p></div>`}).join('');return e+f}getSecurityRecommendationHTML(){if(this.securitySummary.highSeverity>0){return`<div class="security-recommendation critical"><i class="fas fa-shield-alt"></i><div><strong>Critical security issues detected!</strong><p>This token has serious security vulnerabilities that should be addressed immediately.</p></div></div>`}else if(this.securitySummary.mediumSeverity>0){return`<div class="security-recommendation warning"><i class="fas fa-shield-alt"></i><div><strong>Security improvements needed</strong><p>This token has security issues that should be addressed to improve its security posture.</p></div></div>`}else if(this.securitySummary.lowSeverity>0||this.securitySummary.infoItems>0){return`<div class="security-recommendation info"><i class="fas fa-shield-alt"></i><div><strong>Minor issues detected</strong><p>This token has minor issues or could benefit from following best practices.</p></div></div>`}else{return`<div class="security-recommendation good"><i class="fas fa-shield-alt"></i><div><strong>No issues detected</strong><p>This token appears to follow security best practices.</p></div></div>`}}}const jwtAnalyzer=new JWTAnalyzer;