class JWTGenerator{constructor(){this.editor=jwtEditor;this.defaultHeader={alg:'HS256',typ:'JWT'};this.defaultPayload={sub:'1234567890',name:'John Doe',iat:Math.floor(Date.now()/1000),exp:Math.floor(Date.now()/1000)+3600};this.claimTemplates={sub:{name:'Subject',description:'The subject of the JWT (the user)',value:'1234567890'},iss:{name:'Issuer',description:'The issuer of the JWT',value:'https://example.com'},aud:{name:'Audience',description:'The audience of the JWT',value:'https://api.example.com'},exp:{name:'Expiration Time',description:'When the JWT expires (seconds since epoch)',value:Math.floor(Date.now()/1000)+3600},nbf:{name:'Not Before',description:'When the JWT becomes valid (seconds since epoch)',value:Math.floor(Date.now()/1000)},iat:{name:'Issued At',description:'When the JWT was issued (seconds since epoch)',value:Math.floor(Date.now()/1000)},jti:{name:'JWT ID',description:'Unique identifier for the JWT',value:crypto.randomUUID?crypto.randomUUID():Math.random().toString(36).substring(2)}}}resetToDefaults(){this.editor.header={...this.defaultHeader};this.editor.payload={...this.defaultPayload};this.editor.payload.iat=Math.floor(Date.now()/1000);this.editor.payload.exp=Math.floor(Date.now()/1000)+3600}setHeader(a){this.editor.updateHeader(a)}setPayload(a){this.editor.updatePayload(a)}addClaim(a){this.editor.payload||(this.editor.payload={});if(this.claimTemplates[a]){if(!this.editor.payload[a]){this.editor.payload[a]=this.claimTemplates[a].value;return!0}}return!1}removeClaim(a){if(this.editor.payload&&this.editor.payload[a]){delete this.editor.payload[a];return!0}return!1}updateTimestamps(){if(!this.editor.payload)return;const a=Math.floor(Date.now()/1000);this.editor.payload.iat!==void 0&&(this.editor.payload.iat=a);this.editor.payload.nbf!==void 0&&(this.editor.payload.nbf=a);this.editor.payload.exp!==void 0&&(this.editor.payload.exp=a+3600)}generateToken(a,b='',c=''){this.editor.header||(this.editor.header={...this.defaultHeader});this.editor.payload||(this.editor.payload={...this.defaultPayload});this.editor.header.alg=a;return this.editor.generateToken(a,b,c)}getClaimInfo(a){return this.claimTemplates[a]||null}getAllClaimTemplates(){return this.claimTemplates}getFormattedHeader(){return this.editor.getFormattedHeader()}getFormattedPayload(){return this.editor.getFormattedPayload()}}const jwtGenerator=new JWTGenerator;