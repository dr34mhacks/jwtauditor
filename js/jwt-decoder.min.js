class JWTDecoder{constructor(){this.token=null;this.header=null;this.payload=null;this.signature=null;this.parts=[]}decode(a){if(!a)throw new Error('Token is required');a=a.trim();const b=a.split('.');if(b.length!==3)throw new Error('Invalid JWT format. Expected 3 parts separated by dots.');this.token=a;this.parts=b;try{const c=base64UrlDecode(b[0]);this.header=JSON.parse(c);const d=base64UrlDecode(b[1]);this.payload=JSON.parse(d);this.signature=b[2];return{header:this.header,payload:this.payload,signature:this.signature,raw:{header:b[0],payload:b[1],signature:b[2]}}}catch(c){throw new Error(`Failed to decode JWT: ${c.message}`)}}isExpired(){if(!this.payload||!this.payload.exp)return!1;return isExpired(this.payload.exp)}getTimeUntilExpiration(){if(!this.payload||!this.payload.exp)return'No expiration';return timeUntilExpiration(this.payload.exp)}isValidForUse(){if(!this.payload)return!1;const a=getCurrentTimestamp();if(this.payload.exp&&this.payload.exp<a)return!1;if(this.payload.nbf&&this.payload.nbf>a)return!1;return!0}getFormattedPayload(){if(!this.payload)return null;const a={...this.payload},b=['exp','iat','nbf'];for(const c of b){if(a[c]&&typeof a[c]==='number'){a[`${c}_formatted`]=formatTimestamp(a[c])}}return a}getAlgorithm(){return this.header?this.header.alg:null}usesNoneAlgorithm(){return this.getAlgorithm()==='none'}usesSymmetricAlgorithm(){const a=this.getAlgorithm();return a&&a.startsWith('HS')}usesAsymmetricAlgorithm(){const a=this.getAlgorithm();return a&&(a.startsWith('RS')||a.startsWith('ES')||a.startsWith('PS'))}getSigningInput(){if(!this.parts||this.parts.length<2)return'';return`${this.parts[0]}.${this.parts[1]}`}async verifySignature(a){if(!this.token)return!1;try{const b=this.getAlgorithm();if(b==='none')return!0;if(!b.startsWith('HS'))throw new Error(`Algorithm ${b} not supported in fallback mode`);const c=this.getSigningInput(),d=await computeHmac(b,a,c),e=d.replace(/\+/g,'-').replace(/\//g,'_').replace(/=/g,'');return e===this.signature}catch(b){console.error('Error verifying signature:',b);return!1}}}const jwtDecoder=new JWTDecoder;