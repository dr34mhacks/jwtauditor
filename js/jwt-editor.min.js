class JWTEditor{constructor(){this.token=null;this.header=null;this.payload=null;this.signature=null;this.decoder=jwtDecoder}loadToken(a){if(!a)throw new Error('Token is required');try{const b=this.decoder.decode(a);this.token=a;this.header=b.header;this.payload=b.payload;this.signature=b.signature;return b}catch(b){throw new Error(`Failed to load JWT: ${b.message}`)}}updateHeader(a){try{typeof a==='string'&&(a=JSON.parse(a));this.header=a}catch(b){throw new Error(`Invalid header JSON: ${b.message}`)}}updatePayload(a){try{typeof a==='string'&&(a=JSON.parse(a));this.payload=a}catch(b){throw new Error(`Invalid payload JSON: ${b.message}`)}}generateToken(a,b='',c=''){if(!this.header||!this.payload)throw new Error('Header and payload must be set before generating a token');this.header.alg=a;const d=base64UrlEncode(JSON.stringify(this.header)),e=base64UrlEncode(JSON.stringify(this.payload)),f=`${d}.${e}`;let g='';if(a==='none')g='';else if(a.startsWith('HS')){try{let h;if(a==='HS256')h=CryptoJS.HmacSHA256(f,b);else if(a==='HS384')h=CryptoJS.HmacSHA384(f,b);else if(a==='HS512')h=CryptoJS.HmacSHA512(f,b);else throw new Error(`Unsupported algorithm: ${a}`);const i=CryptoJS.enc.Base64.stringify(h);g=i.replace(/\+/g,'-').replace(/\//g,'_').replace(/=/g,'')}catch(h){throw new Error(`Failed to generate HMAC signature: ${h.message}`)}}else if(a.startsWith('RS')){if(!c)throw new Error('Private key is required for RSA algorithms');if(typeof KJUR==='undefined'||!KJUR.crypto||!KJUR.crypto.Signature)throw new Error('jsrsasign library is not loaded or not available. Please refresh the page and try again.');if(!c.includes('-----BEGIN')||!c.includes('PRIVATE KEY-----'))throw new Error('Private key must be in PEM format (-----BEGIN ... PRIVATE KEY-----)');try{let h;switch(a){case'RS256':h='SHA256withRSA';break;case'RS384':h='SHA384withRSA';break;case'RS512':h='SHA512withRSA';break;default:throw new Error(`Unsupported RSA algorithm: ${a}`)}const i=new KJUR.crypto.Signature({alg:h});i.init(c);i.updateString(f);const j=i.sign(),k=[];for(let l=0;l<j.length;l+=2)k.push(parseInt(j.slice(l,l+2),16));let m='';const n=8192;for(let l=0;l<k.length;l+=n){const o=k.slice(l,l+n);m+=String.fromCharCode(...o)}const p=btoa(m);g=p.replace(/\+/g,'-').replace(/\//g,'_').replace(/=/g,'')}catch(h){throw new Error(`Failed to generate RSA signature: ${h.message}`)}}else throw new Error(`Unsupported algorithm: ${a}`);return`${f}.${g}`}generateNoneToken(){return this.generateToken('none')}generateSymmetricToken(a,b){if(!a.startsWith('HS'))throw new Error('Algorithm must be HS256, HS384, or HS512 for symmetric signing');return this.generateToken(a,b)}generateAsymmetricToken(a,b){if(!a.startsWith('RS'))throw new Error('Algorithm must be RS256, RS384, or RS512 for asymmetric signing');return this.generateToken(a,'',b)}getFormattedHeader(){return JSON.stringify(this.header,null,2)}getFormattedPayload(){return JSON.stringify(this.payload,null,2)}async verifySignature(a){if(!this.token)throw new Error('No token loaded');const b=this.token.split('.');if(b.length!==3)throw new Error('Invalid token format');const c=this.header,d=c.alg;if(d==='none')return!0;const e=`${b[0]}.${b[1]}`,f=b[2];if(d.startsWith('HS')){try{let g;if(d==='HS256')g=CryptoJS.HmacSHA256(e,a);else if(d==='HS384')g=CryptoJS.HmacSHA384(e,a);else if(d==='HS512')g=CryptoJS.HmacSHA512(e,a);else throw new Error(`Unsupported algorithm: ${d}`);const h=CryptoJS.enc.Base64.stringify(g),i=h.replace(/\+/g,'-').replace(/\//g,'_').replace(/=/g,'');return i===f}catch(g){console.error('Error verifying HMAC signature:',g);return!1}}else if(d.startsWith('RS')){if(typeof KJUR==='undefined'||!KJUR.crypto||!KJUR.crypto.Signature||!KEYUTIL)throw new Error('jsrsasign library is not loaded or not available. Please refresh the page and try again.');try{let g;switch(d){case'RS256':g='SHA256withRSA';break;case'RS384':g='SHA384withRSA';break;case'RS512':g='SHA512withRSA';break;default:throw new Error(`Unsupported RSA algorithm: ${d}`)}const h=KEYUTIL.getKey(a),i=new KJUR.crypto.Signature({alg:g});i.init(h);i.updateString(e);const j=f.replace(/-/g,'+').replace(/_/g,'/'),k=j+'=='.slice(0,(4-j.length%4)%4),l=atob(k),m=Array.from(l,n=>n.charCodeAt(0).toString(16).padStart(2,'0')).join('');return i.verify(m)}catch(g){console.error('Error verifying RSA signature:',g);return!1}}else throw new Error(`Unsupported algorithm: ${d}`)}}const jwtEditor=new JWTEditor;